*******************************************
Schedule Python program in Windows Tasker *
*******************************************

1. Open Anaconda Prompt console and enter: pip install pyinstaller
   - pyinstaller library allows us to make executable (.exe) files from python scripts.

2. Create executable file from Python script by entering in console: pyinstaller --onefile name_of_script.py
   - Several files and folders will be added into the same directory as the Python script.
   - For now, the important folder is "dist", which contains the executable file as "name_of_script.exe"

3. Follow the following steps to add a basic task into Windows Tasker application.
   - Made by ChatGPT

	To schedule the execution of a Python script (.py) in Windows, you can make use of the Task Scheduler utility. Follow these steps to schedule your Python script:

	1. Open the Task Scheduler: Press the Windows key, type "Task Scheduler," and select the "Task Scheduler" application that appears in the search results.

	2. Create a new task: In the Task Scheduler window, click on "Create Task" in the Actions panel on the right side.

	3. Configure the task:
	   - In the General tab, provide a name and description for your task.
	   - Ensure that the "Run whether the user is logged on or not" option is selected.
	   - Check the "Run with highest privileges" box to run the script with administrator privileges if needed.
	   - Choose the appropriate Windows version in the "Configure for" drop-down menu.

	4. Trigger the task: In the Triggers tab, click on "New" to create a new trigger for your task.
	   - Select the desired trigger type (e.g., daily, weekly, at logon, etc.).
	   - Set the trigger details (start time, recurrence, etc.) according to your schedule preferences.

	5. Set the action: In the Actions tab, click on "New" to add a new action to your task.
	   - In the "Program/script" field, enter the path to the Python executable (e.g., `C:\Python39\python.exe`).
	   - In the "Add arguments" field, provide the path to your Python script file (e.g., `C:\path\to\your\script.py`).
	   - In the "Start in" field, specify the directory where your script should run from (if necessary).

	6. Additional settings: You can configure additional settings in the other tabs if needed (e.g., Conditions, Settings).

	7. Save and test the task: Click on "OK" to save the task. You may be prompted to enter your Windows account credentials.
	   - You can test the task by right-clicking on it in the Task Scheduler window and selecting "Run."

	Once the task is scheduled, it will execute the specified Python script according to the trigger and settings you configured.

	Note: Make sure that you have Python installed on your Windows system and that the script's dependencies are properly set up for it to run successfully.
